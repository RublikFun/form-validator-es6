'use strict';

var Answer = function Answer(container) {
	this.ranges = {};
	this.required = {};
	this.container = container;
	this.value = {};
	this.validations = [];
	this.init();
};
Answer.prototype = {
	init: function init() {
		this.setRanges();
		this.setRequired();
		this.formatValue();
		this.setChange(this.container);
	},
	setValidation: function setValidation(arg) {
		if (typeof arg === 'boolean') {
			this.validations.push(arg);
			return;
		}
		this.validations = [];
	},
	getValidation: function getValidation() {
		var i,
		    allAreValid = true;
		for (i = 0; i < this.validations.length; i++) {
			if (this.validations[i] === false) {
				allAreValid = false;
				break;
			}
		}
		return allAreValid;
	},
	setRanges: function setRanges() {
		var self = this;
		$(this.container).each(function () {
			self.ranges[$(this).data('field')] = {
				max: $(this).data('max'),
				min: $(this).data('min')
			};
		});
	},
	setRequired: function setRequired() {
		var self = this;
		$(this.container).each(function () {
			if ($(this).data('required') === false) {
				self.required[$(this).data('field')] = false;
			} else {
				self.required[$(this).data('field')] = true;
			}
		});
	},
	setChange: function setChange(els) {
		var self = this;
		els.on('change', function () {
			self.callbackCheck();
			self.formatValue();
		});
	},
	setCallbackChange: function setCallbackChange(els) {
		var self = this,
		    elementsToBind;
		elementsToBind = els.filter(function () {
			if (self.hasField(this)) {
				return this;
			}
		});
		$(elementsToBind).on('change', function () {
			self.formatValue();
		});
	},
	unsetChange: function unsetChange(els) {
		var self = this,
		    elementsToBind;
		elementsToBind = els.filter(function () {
			if (self.hasField(this)) {
				return this;
			}
		});
		$(elementsToBind).off('change');
	},
	callbackCheck: function callbackCheck() {
		var self = this;
		$(this.container).each(function () {
			self.checkForCallback($(this));
		});
	},

	formatValue: function formatValue(shouldReset) {
		var self = this,
		    reset = shouldReset || false;
		$(this.container).each(function () {
			if (reset) {
				self.clearValue($(this));
			}
			self.trackValue($(this));
		});
	},
	trackValue: function trackValue(el) {
		var key = el.data('grouping');
		if (key !== undefined) {
			this.trackDimensionalValue(el, key);
		} else {
			$.extend(this.value, this.formattedValue(el));
		}
	},
	trackDimensionalValue: function trackDimensionalValue(el, key) {
		this.value[key] = this.value[key] === undefined ? {} : this.value[key];
		$.extend(this.value[key], this.formattedValue(el));
	},
	formattedValue: function formattedValue(el) {
		var val = {};
		var key = el.data('field');
		val[key] = this.getDefault(el);
		if (this.hasValue(el)) {
			val[key] = this.getValueOrDefault(el);
			this.removeError(key);
			return val;
		}
		if (this.shouldOverwrite(el)) {
			val[key] = this.getDefault(el);
			return val;
		}
		return;
	},
	getValueOrDefault: function getValueOrDefault(el) {
		var value = el.val();
		if (value === '') {
			value = this.getDefault(el);
		}
		return value;
	},
	getDefault: function getDefault(el) {
		var value = '';
		if (el.data('default') !== undefined) {
			value = el.data('default');
		}
		return value;
	},
	deleteValue: function deleteValue(el) {
		var self = this;
		$(el).each(function () {
			delete self.value[$(this).data('field')];
		});
	},
	checkForCallback: function checkForCallback(el) {
		if (this.hasValue(el)) {
			return this.revealCallback(el);
		}

		return this.revertCallback(el);
	},
	revealCallback: function revealCallback(el) {
		var callbackElement = $('.' + el.data('callback')),
		    self = this;
		if (callbackElement.length > 0) {
			callbackElement.each(function () {
				if (self.hasField(this)) {
					self.addAnswer($(this));
				}
			});
			callbackElement.addClass('active');
		}
	},
	revertCallback: function revertCallback(el) {
		var callbackElement = $('.' + el.data('callback'));
		if (callbackElement.length > 0) {
			this.clearValue(callbackElement);
			this.removeAnswer(callbackElement);
			callbackElement.removeClass('active');
		}
	},

	hasValue: function hasValue(container) {
		return this.isValidInput(container) || this.isValidCheckbox(container) || this.isValidSelect(container);
	},
	shouldOverwrite: function shouldOverwrite(el) {
		return this.isDuplicate(el) && this.isFirst(el) || !this.isDuplicate(el);
	},
	isDuplicate: function isUnique(el) {
		return $('[data-field="' + el.data('field') + '"]').length > 1;
	},
	isFirst: function isFirst(el) {
		return $('[data-field="' + el.data('field') + '"]').index(el) === 0;
	},
	clearValue: function clearValue(el) {
		if (this.isValidInput(el)) {
			el.val('');
		}
		el.prop('checked', false);
		el.find('option').prop('selected', false);
	},
	hasField: function hasField(el) {
		if ($(el).data('field')) {
			return true;
		}
		return false;
	},

	addError: function addError(answer) {
		$('[data-field="' + answer + '"]').addClass('error');
	},
	removeError: function removeError(answer) {
		$('[data-field="' + answer + '"]').removeClass('error');
	},

	isValid: function isValid() {
		this.setValidation();
		for (var answer in this.value) {
			var value = this.value[answer];
			if (typeof value === 'object') {
				var validity = this.checkGroupValidity(value);
				this.setValidation(validity);
			} else {
				var validity = this.checkIndividualValidity(answer, value);
				this.setValidation(validity);
			}
		}
		return this.getValidation();
	},
	checkGroupValidity: function checkGroupValidity(group) {
		var groupIsValid = true;
		for (var subAnswer in group) {
			groupIsValid = this.checkIndividualValidity(subAnswer, group[subAnswer]);
		}
		return groupIsValid;
	},
	checkIndividualValidity: function checkIndividualValidity(key, value) {
		var fieldIsValid = this.validatePresence(key, value) && this.validateRange(key, value);
		if (fieldIsValid) {
			this.removeError(key);
		}
		return fieldIsValid;
	},

	validatePresence: function validatePresence(key, value) {
		if (!this.isPresent(key, value)) {
			this.addError(key);
			return false;
		}
		return true;
	},
	validateRange: function validateRange(key, value) {
		if (!this.isBetween(key, value)) {
			this.addError(key);
			return false;
		}
		return true;
	},

	isValidInput: function isValidInput(el) {
		if (el.attr('type') === 'text') {
			return true;
		}
		return false;
	},
	isValidCheckbox: function isValidCheckbox(el) {
		if (el.prop('checked')) {
			return true;
		}
		return false;
	},
	isValidSelect: function isValidSelect(el) {
		if (el[0].tagName === 'SELECT' && el.val()) {
			return true;
		}
		return false;
	},

	isPresent: function isPresent(key, value) {
		return this.required[key] === false || value !== '';
	},
	isBetween: function isBetween(key, value) {
		if (this.ranges[key] === undefined) {
			return true;
		}
		var max = this.ranges[key].max;
		var min = this.ranges[key].min;
		if (max === undefined || min === undefined) {
			return true;
		}
		return value <= max && value >= min;
	},

	addAnswer: function addAnswer(container) {
		this.container = this.container.add(container);
		this.setCallbackChange(container);
		this.setRanges();
		this.setRequired();
	},
	removeAnswer: function removeAnswer(container) {
		this.container = this.container.not(container);
		this.unsetChange(container);
		this.setRanges();
		this.required = {};
		this.setRequired();
		this.deleteValue(container);
	}

};
'use strict';

var Answers = function Answers() {
	this.privateValue = {};
	this.all = [];
};
Answers.prototype = {
	createAnswer: function createAnswer(dom) {
		var answer = new Answer(dom);
		this.all.push(answer);
		return answer;
	},
	getRecord: function getRecord() {
		this.report();
		return this.privateValue;
	},
	setRecord: function setRecord(arg) {
		this.privateValue = arg;
	},
	validateAll: function validateAll() {
		for (var i = 0; i < this.all.length; i++) {
			this.all[i].isValid();
		}
	},
	report: function report() {
		for (var i = 0; i < this.all.length; i++) {
			$.extend(this.privateValue, this.all[i].value);
		}
		return this.privateValue;
	},
	resetAll: function resetAll() {
		for (var i = 0; i < this.all.length; i++) {
			this.all[i].formatValue(true);
		}
		this.report();
	}
};
'use strict';

var Scene = function Scene(klass) {
	this.container = klass;
	this.bound = false;
	return this;
};
Scene.prototype = {
	setCallback: function setCallback() {
		var callback = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];
		var args = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

		this.callback = callback;
		this.args = args;
		return this;
	},
	setScript: function setScript(script) {
		this.script = script || undefined;
		return this;
	},
	setButton: function setButton() {
		var klass = arguments.length <= 0 || arguments[0] === undefined ? '.js-button' : arguments[0];

		this.button = this.findButton(klass);
		return this;
	},
	setAnswer: function setAnswer() {
		var klass = arguments.length <= 0 || arguments[0] === undefined ? '.js-answer' : arguments[0];

		this.answerClass = klass;
		return this;
	},
	bindClicks: function bindClicks() {
		var self = this;
		this.button.each(function () {
			self.bindClick($(this));
		});
	},
	init: function init(script) {
		var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

		this.setCallback(opts.callback, opts.callbackArgs).setScript(script).setButton(opts.button).setAnswer(opts.answer).createAnswers().bindClicks();
	},
	createAnswers: function createAnswers() {
		if (this.script === undefined) {
			this.answer = new Answer(this.container.find(this.answerClass));
			return this;
		}
		var answerEl = this.container.find(this.answerClass);
		this.answer = this.script.answers.createAnswer(answerEl);
		return this;
	},
	findButton: function findButton(buttonClass) {
		if (buttonClass !== undefined) {
			return this.container.find(buttonClass);
		}
		return this.container.find('.js-button');
	},
	show: function show() {
		this.container.addClass('active');
	},
	hide: function hide() {
		this.container.removeClass('active');
	},
	shake: function shake() {
		this.container.addClass('error');
	},
	unshake: function unshake() {
		this.container.removeClass('error');
	},
	handleCallback: function handleCallback() {
		var args = typeof this.args === 'function' ? this.args() : this.args;

		if (this.callback) {
			this.callback(args);
		}
	},
	finalize: function finalize() {
		this.unshake();
		if (this.script !== undefined) {
			this.script.next();
		}
		this.handleCallback();
		return true;
	},
	validate: function validate() {
		this.answer.isValid();
		if ($(this.answer.container).hasClass('error')) {
			this.shake();
			return false;
		}
		this.finalize();
	},
	bindClick: function bindClick(el) {
		var self = this;
		el.click(function () {
			self.validate();
		});
		this.bound = true;
	},
	destroy: function destroy() {
		this.hide();
		delete this.answers;
		delete this;
	}
};
'use strict';

var Script = function Script(container) {
	var auto = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

	this.container = container;
	this.scenes = [];
	this.current = 0;
	if (auto) {
		this.init();
	}
	return this;
};
Script.prototype = {
	setFinished: function setFinished(onFinished, args) {
		this.onFinished = onFinished || false;
		this.args = args || false;
		return this;
	},
	setScene: function setScene(klass) {
		this.sceneClass = klass || '.js-scene';
		return this;
	},
	setButton: function setButton(klass) {
		this.buttonClass = klass || '.js-button';
		return this;
	},
	setAnswer: function setAnswer(klass) {
		this.answerClass = klass || '.js-answer';
		return this;
	},
	setAnswers: function setAnswers(answers) {
		this.answers = answers || new Answers();
		return this;
	},
	makeScenes: function makeScenes(opts) {
		if (this.answers !== undefined) {
			opts.answers = this.answers;
		}
		var self = this;
		this.container.find(this.sceneClass).each(function () {
			self.addScene($(this), opts);
		});
		return this;
	},
	init: function init() {
		var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

		this.setFinished(opts.onFinished, opts.onFinishedArgs).setScene(opts.scene).setButton(opts.button).setAnswer(opts.answer).setAnswers(opts.answers).makeScenes(opts).start();
	},

	addScene: function addScene(el, opts) {
		var scene = new Scene(el);
		scene.init(this, opts);
		this.scenes.push(scene);
	},
	removeScene: function removeScene() {
		this.scenes.pop().destroy();
	},

	addAt: function addAt(index, el, opts) {
		var scene = new Scene(el);
		scene.init(this, opts);
		this.scenes.splice(index, 0, scene);
	},
	removeAt: function removeAt(index) {
		this.scenes.splice(index, 1)[0].destroy();
	},

	previous: function previous() {
		this.scenes[this.current].hide();
		if (this.current > 0) {
			this.untick();
			return true;
		}
		this.start();
	},
	next: function next() {
		this.scenes[this.current].hide();
		if (this.scenes.length - 1 > this.current) {
			this.tick();
			return true;
		}
		this.finish();
	},

	tick: function tick() {
		this.current += 1;
		this.scenes[this.current].show();
	},
	untick: function untick() {
		this.current -= 1;
		this.scenes[this.current].show();
	},

	handleFunction: function handleFunction(funct, args) {
		funct.call(this, args);
	},

	handleArray: function handleArray() {
		this.formatArgsArray();
		for (var i = 0; i < this.onFinished.length; i++) {
			this.onFinished[i].call(this, this.args[i]);
		}
	},
	formatArgsArray: function formatArgsArray() {
		if (typeof this.args === 'object') {
			return;
		}
		this.args = new Array(this.args);
	},
	finish: function finish() {
		this.container.addClass('finished');
		if (this.onFinished) {
			if (typeof this.onFinished === 'function') {
				this.handleFunction(this.onFinished, this.args);
				return;
			}
			this.handleArray();
		}
	},
	start: function start() {
		this.current = 0;
		this.scenes[this.current].show();
		this.container.addClass('started');
	},
	restart: function restart() {
		this.answers.resetAll();
		this.container.removeClass('finished');
		this.start();
	},
	addCallbackToScene: function addCallbackToScene(sceneIdx, callback, arg) {
		var scene = this.scenes[sceneIdx];
		scene.args = arg;
		scene.callback = callback.bind(scene);
	}
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFuc3dlci5qcyIsImFuc3dlcnMuanMiLCJzY2VuZS5qcyIsInNjcmlwdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7O0FBRWIsSUFBSSxNQUFNLEdBQUcsU0FBVCxNQUFNLENBQVksU0FBUyxFQUFDO0FBQy9CLEtBQUksQ0FBQyxNQUFNLEdBQVEsRUFBRSxDQUFDO0FBQ3RCLEtBQUksQ0FBQyxRQUFRLEdBQU0sRUFBRSxDQUFDO0FBQ3RCLEtBQUksQ0FBQyxTQUFTLEdBQUssU0FBUyxDQUFDO0FBQzdCLEtBQUksQ0FBQyxLQUFLLEdBQVMsRUFBRSxDQUFDO0FBQ3RCLEtBQUksQ0FBQyxXQUFXLEdBQUcsRUFBRSxDQUFDO0FBQ3RCLEtBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztDQUNaLENBQUM7QUFDRixNQUFNLENBQUMsU0FBUyxHQUFHO0FBQ2xCLEtBQUksRUFBRSxTQUFTLElBQUksR0FBRTtBQUNwQixNQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7QUFDakIsTUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ25CLE1BQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUNuQixNQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztFQUMvQjtBQUNELGNBQWEsRUFBRSx1QkFBUyxHQUFHLEVBQUM7QUFDM0IsTUFBRyxPQUFPLEdBQUcsS0FBSyxTQUFTLEVBQUM7QUFDM0IsT0FBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDM0IsVUFBTztHQUNQO0FBQ0QsTUFBSSxDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUM7RUFDdEI7QUFDRCxjQUFhLEVBQUUseUJBQVU7QUFDeEIsTUFBSSxDQUFDO01BQUUsV0FBVyxHQUFHLElBQUksQ0FBQztBQUMxQixPQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUMsRUFB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QUFDO0dBQ25CO0VBQ0Q7QUFDRCxNQUFLLEVBQUcsU0FBUyxLQUFLLEdBQUU7QUFDdkIsTUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUM7QUFDakIsTUFBSSxDQUFDLE1BQU0sQ0FBRSxJQUFJLENBQUMsT0FBTyxDQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDbkMsTUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUUsU0FBUyxDQUFFLENBQUM7RUFDckM7QUFDRCxRQUFPLEVBQUUsU0FBUyxPQUFPLEdBQUU7QUFDMUIsTUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUN4QixNQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBRSxVQUFVLENBQUUsQ0FBQztBQUN6QyxNQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7RUFDYjtBQUNELG1CQUFrQixFQUFFLDRCQUFVLFFBQVEsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFHO0FBQ3ZELE1BQUksS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUUsUUFBUSxDQUFFLENBQUM7QUFDcEMsT0FBSyxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7QUFDakIsT0FBSyxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFFLEtBQUssQ0FBRSxDQUFDO0VBQ3hDO0NBQ0QsQ0FBQyIsImZpbGUiOiJzdG9yeWJvYXJkZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBBbnN3ZXIgPSBmdW5jdGlvbihjb250YWluZXIpe1xuXHR0aGlzLnJhbmdlcyAgICAgID0ge307XG5cdHRoaXMucmVxdWlyZWQgICAgPSB7fTtcblx0dGhpcy5jb250YWluZXIgICA9IGNvbnRhaW5lcjtcblx0dGhpcy52YWx1ZSAgICAgICA9IHt9O1xuXHR0aGlzLnZhbGlkYXRpb25zID0gW107XG5cdHRoaXMuaW5pdCgpO1x0XG59O1xuQW5zd2VyLnByb3RvdHlwZSA9IHtcblx0aW5pdDogZnVuY3Rpb24gaW5pdCgpe1xuXHRcdHRoaXMuc2V0UmFuZ2VzKCk7XG5cdFx0dGhpcy5zZXRSZXF1aXJlZCgpO1xuXHRcdHRoaXMuZm9ybWF0VmFsdWUoKTtcblx0XHR0aGlzLnNldENoYW5nZSh0aGlzLmNvbnRhaW5lcik7XG5cdH0sXG5cdHNldFZhbGlkYXRpb246IGZ1bmN0aW9uKGFyZyl7XG5cdFx0aWYodHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nKXtcblx0XHRcdHRoaXMudmFsaWRhdGlvbnMucHVzaChhcmcpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHR0aGlzLnZhbGlkYXRpb25zID0gW107XG5cdH0sXG5cdGdldFZhbGlkYXRpb246IGZ1bmN0aW9uKCl7XG5cdFx0dmFyIGksIGFsbEFyZVZhbGlkID0gdHJ1ZTtcblx0XHRmb3IoaSA9IDA7IGkgPCB0aGlzLnZhbGlkYXRpb25zLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRpZih0aGlzLnZhbGlkYXRpb25zW2ldID09PSBmYWxzZSkge1xuXHRcdFx0XHRhbGxBcmVWYWxpZCA9IGZhbHNlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGFsbEFyZVZhbGlkO1xuXHR9LFxuXHRzZXRSYW5nZXM6IGZ1bmN0aW9uIHNldFJhbmdlcygpe1xuXHRcdHZhciBzZWxmID0gdGhpcztcblx0XHQkKHRoaXMuY29udGFpbmVyKS5lYWNoKGZ1bmN0aW9uKCl7XG5cdFx0XHRzZWxmLnJhbmdlc1skKHRoaXMpLmRhdGEoJ2ZpZWxkJyldID0ge1xuXHRcdFx0XHRtYXg6ICQodGhpcykuZGF0YSgnbWF4JyksIFxuXHRcdFx0XHRtaW46ICQodGhpcykuZGF0YSgnbWluJylcblx0XHRcdH07XG5cdFx0fSk7XG5cdH0sXG5cdHNldFJlcXVpcmVkOiBmdW5jdGlvbiBzZXRSZXF1aXJlZCgpe1xuXHRcdHZhciBzZWxmID0gdGhpcztcblx0XHQkKHRoaXMuY29udGFpbmVyKS5lYWNoKGZ1bmN0aW9uKCl7XG5cdFx0XHRpZigkKHRoaXMpLmRhdGEoJ3JlcXVpcmVkJykgPT09IGZhbHNlICl7XG5cdFx0XHRcdHNlbGYucmVxdWlyZWRbJCh0aGlzKS5kYXRhKCdmaWVsZCcpXSA9IGZhbHNlO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2VsZi5yZXF1aXJlZFskKHRoaXMpLmRhdGEoJ2ZpZWxkJyldID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSxcblx0c2V0Q2hhbmdlOiBmdW5jdGlvbiBzZXRDaGFuZ2UoZWxzKXtcblx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cdFx0ZWxzLm9uKCAnY2hhbmdlJywgZnVuY3Rpb24oKXtcblx0XHRcdFx0c2VsZi5jYWxsYmFja0NoZWNrKCk7XG5cdFx0XHRcdHNlbGYuZm9ybWF0VmFsdWUoKTtcblx0XHRcdH0pO1xuXHR9LFxuXHRzZXRDYWxsYmFja0NoYW5nZTogZnVuY3Rpb24gc2V0Q2FsbGJhY2tDaGFuZ2UoZWxzKXtcblx0XHR2YXIgc2VsZiA9IHRoaXMsIGVsZW1lbnRzVG9CaW5kO1xuXHRcdGVsZW1lbnRzVG9CaW5kID0gZWxzLmZpbHRlcihmdW5jdGlvbigpe1x0XG5cdFx0XHRpZihzZWxmLmhhc0ZpZWxkKHRoaXMpKXtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0JChlbGVtZW50c1RvQmluZCkub24oICdjaGFuZ2UnLCBmdW5jdGlvbigpe1xuXHRcdFx0XHRzZWxmLmZvcm1hdFZhbHVlKCk7XG5cdFx0XHR9KTtcblx0fSxcdFxuXHR1bnNldENoYW5nZTogZnVuY3Rpb24gdW5zZXRDaGFuZ2UoZWxzKXtcblx0XHR2YXIgc2VsZiA9IHRoaXMsIGVsZW1lbnRzVG9CaW5kO1xuXHRcdGVsZW1lbnRzVG9CaW5kID0gZWxzLmZpbHRlcihmdW5jdGlvbigpe1x0XG5cdFx0XHRpZihzZWxmLmhhc0ZpZWxkKHRoaXMpKXtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0JChlbGVtZW50c1RvQmluZCkub2ZmKCdjaGFuZ2UnKTtcblx0fSxcdFx0XG5cdGNhbGxiYWNrQ2hlY2s6IGZ1bmN0aW9uIGNhbGxiYWNrQ2hlY2soKXtcblx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cdFx0JCh0aGlzLmNvbnRhaW5lcikuZWFjaChmdW5jdGlvbigpe1xuXHRcdFx0c2VsZi5jaGVja0ZvckNhbGxiYWNrKCQodGhpcykpO1xuXHRcdH0pO1xuXHR9LFxuXG5cdGZvcm1hdFZhbHVlOiBmdW5jdGlvbiBmb3JtYXRWYWx1ZShzaG91bGRSZXNldCl7XG5cdFx0dmFyIHNlbGYgPSB0aGlzLCByZXNldCA9IHNob3VsZFJlc2V0IHx8IGZhbHNlO1xuXHRcdCQodGhpcy5jb250YWluZXIpLmVhY2goZnVuY3Rpb24oKXtcblx0XHRcdGlmKHJlc2V0KXtcblx0XHRcdFx0c2VsZi5jbGVhclZhbHVlKCQodGhpcykpO1xuXHRcdFx0fVx0XHRcdFx0XHRcblx0XHRcdHNlbGYudHJhY2tWYWx1ZSggJCh0aGlzKSApO1xuXHRcdH0pO1xuXHR9LFx0XG5cdHRyYWNrVmFsdWU6IGZ1bmN0aW9uIHRyYWNrVmFsdWUoZWwpe1xuXHRcdHZhciBrZXkgPSBlbC5kYXRhKCdncm91cGluZycpO1xuXHRcdGlmKGtleSAhPT0gdW5kZWZpbmVkKXtcblx0XHRcdHRoaXMudHJhY2tEaW1lbnNpb25hbFZhbHVlKGVsLCBrZXkpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQkLmV4dGVuZCggdGhpcy52YWx1ZSwgdGhpcy5mb3JtYXR0ZWRWYWx1ZShlbCkgKTtcblx0XHR9XG5cdH0sXG5cdHRyYWNrRGltZW5zaW9uYWxWYWx1ZTogZnVuY3Rpb24gdHJhY2tEaW1lbnNpb25hbFZhbHVlKGVsLCBrZXkpe1xuXHRcdHRoaXMudmFsdWVba2V5XSA9IHRoaXMudmFsdWVba2V5XSA9PT0gdW5kZWZpbmVkID8ge30gOiB0aGlzLnZhbHVlW2tleV07XG5cdFx0JC5leHRlbmQoIHRoaXMudmFsdWVba2V5XSwgdGhpcy5mb3JtYXR0ZWRWYWx1ZShlbCkgKTtcblx0fSxcblx0Zm9ybWF0dGVkVmFsdWU6IGZ1bmN0aW9uIGZvcm1hdHRlZFZhbHVlKGVsKXtcblx0XHR2YXIgdmFsID0ge307XG5cdFx0dmFyIGtleSA9IGVsLmRhdGEoICdmaWVsZCcgKTtcblx0XHRcdFx0dmFsWyBrZXkgXSA9IHRoaXMuZ2V0RGVmYXVsdCggZWwgKTtcdFx0XG5cdFx0aWYoIHRoaXMuaGFzVmFsdWUoZWwpICl7XG5cdFx0XHR2YWxbIGtleSBdID0gdGhpcy5nZXRWYWx1ZU9yRGVmYXVsdCggZWwgKTtcblx0XHRcdHRoaXMucmVtb3ZlRXJyb3IoIGtleSApO1xuXHRcdFx0cmV0dXJuIHZhbDtcblx0XHR9XG5cdFx0aWYoIHRoaXMuc2hvdWxkT3ZlcndyaXRlKCBlbCApICl7XG5cdFx0XHR2YWxbIGtleSBdID0gdGhpcy5nZXREZWZhdWx0KCBlbCApO1x0XHRcdFx0XHRcblx0XHRcdHJldHVybiB2YWw7XG5cdFx0fVxuXHRcdHJldHVybjtcblx0fSxcblx0Z2V0VmFsdWVPckRlZmF1bHQ6IGZ1bmN0aW9uIGdldFZhbHVlT3JEZWZhdWx0KCBlbCApe1xuXHRcdHZhciB2YWx1ZSA9IGVsLnZhbCgpO1xuXHRcdGlmKCB2YWx1ZSA9PT0gJycgKXtcblx0XHRcdHZhbHVlID0gdGhpcy5nZXREZWZhdWx0KCBlbCApO1xuXHRcdH1cblx0XHRyZXR1cm4gdmFsdWU7XG5cdH0sXG5cdGdldERlZmF1bHQ6IGZ1bmN0aW9uIGdldERlZmF1bHQoIGVsICl7XG5cdFx0dmFyIHZhbHVlID0gJyc7XG5cdFx0aWYoIGVsLmRhdGEoJ2RlZmF1bHQnKSAhPT0gdW5kZWZpbmVkICl7XG5cdFx0XHR2YWx1ZSA9IGVsLmRhdGEoJ2RlZmF1bHQnKTtcblx0XHR9XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9LFxuXHRkZWxldGVWYWx1ZTogZnVuY3Rpb24gZGVsZXRlVmFsdWUoIGVsICl7XG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xuXHRcdCQoIGVsICkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkZWxldGUgc2VsZi52YWx1ZVsgJCggdGhpcyApLmRhdGEoICdmaWVsZCcgKSBdO1xuXHRcdH0gKTtcblx0fSxcblx0Y2hlY2tGb3JDYWxsYmFjazogZnVuY3Rpb24gY2hlY2tGb3JDYWxsYmFjayggZWwgKXtcblx0XHRpZiAoIHRoaXMuaGFzVmFsdWUoIGVsICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5yZXZlYWxDYWxsYmFjayggZWwgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5yZXZlcnRDYWxsYmFjayggZWwgKTtcblx0fSxcblx0cmV2ZWFsQ2FsbGJhY2s6IGZ1bmN0aW9uIHJldmVhbENhbGxiYWNrKCBlbCApe1xuXHRcdHZhciBjYWxsYmFja0VsZW1lbnQgPSAkKCAnLicgKyBlbC5kYXRhKCAnY2FsbGJhY2snICkgKSxcblx0XHRzZWxmID0gdGhpcztcblx0XHRpZiggY2FsbGJhY2tFbGVtZW50Lmxlbmd0aCA+IDAgKXtcblx0XHRcdGNhbGxiYWNrRWxlbWVudC5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYoIHNlbGYuaGFzRmllbGQoIHRoaXMgKSApe1xuXHRcdFx0XHRcdHNlbGYuYWRkQW5zd2VyKCAkKCB0aGlzICkgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdFx0Y2FsbGJhY2tFbGVtZW50LmFkZENsYXNzKCAnYWN0aXZlJyApO1xuXHRcdH1cblx0fSxcblx0cmV2ZXJ0Q2FsbGJhY2s6IGZ1bmN0aW9uIHJldmVydENhbGxiYWNrKCBlbCApe1xuXHRcdHZhciBjYWxsYmFja0VsZW1lbnQgPSAkKCAnLicgKyBlbC5kYXRhKCAnY2FsbGJhY2snICkgKTtcblx0XHRpZiggY2FsbGJhY2tFbGVtZW50Lmxlbmd0aCA+IDAgKXtcdFx0XG5cdFx0XHR0aGlzLmNsZWFyVmFsdWUoIGNhbGxiYWNrRWxlbWVudCApO1xuXHRcdFx0dGhpcy5yZW1vdmVBbnN3ZXIoIGNhbGxiYWNrRWxlbWVudCApO1xuXHRcdFx0Y2FsbGJhY2tFbGVtZW50LnJlbW92ZUNsYXNzKCAnYWN0aXZlJyApO1xuXHRcdH1cblx0fSxcblxuXG5cdGhhc1ZhbHVlOiBmdW5jdGlvbiBoYXNWYWx1ZShjb250YWluZXIpe1xuXHRcdHJldHVybiB0aGlzLmlzVmFsaWRJbnB1dChjb250YWluZXIpIHx8IFxuXHRcdFx0XHRcdCB0aGlzLmlzVmFsaWRDaGVja2JveChjb250YWluZXIpIHx8XG5cdFx0XHRcdFx0IHRoaXMuaXNWYWxpZFNlbGVjdChjb250YWluZXIpO1xuXHR9LFxuXHRzaG91bGRPdmVyd3JpdGU6IGZ1bmN0aW9uIHNob3VsZE92ZXJ3cml0ZShlbCl7XG5cdFx0cmV0dXJuICggdGhpcy5pc0R1cGxpY2F0ZShlbCkgJiYgXG5cdFx0XHRcdFx0XHQgdGhpcy5pc0ZpcnN0KGVsKSApIHx8IFxuXHRcdFx0XHRcdFx0IXRoaXMuaXNEdXBsaWNhdGUoZWwpO1xuXHR9LFxuXHRpc0R1cGxpY2F0ZTogZnVuY3Rpb24gaXNVbmlxdWUoZWwpe1xuXHRcdHJldHVybiAkKCdbZGF0YS1maWVsZD1cIicrZWwuZGF0YSgnZmllbGQnKSsnXCJdJykubGVuZ3RoID4gMTtcblx0fSxcblx0aXNGaXJzdDogZnVuY3Rpb24gaXNGaXJzdChlbCl7XG5cdFx0cmV0dXJuICQoJ1tkYXRhLWZpZWxkPVwiJytlbC5kYXRhKCdmaWVsZCcpKydcIl0nKS5pbmRleChlbCkgPT09IDA7XG5cdH0sXG5cdGNsZWFyVmFsdWU6IGZ1bmN0aW9uIGNsZWFyVmFsdWUoZWwpe1xuXHRcdGlmKCB0aGlzLmlzVmFsaWRJbnB1dChlbCkgKXtcblx0XHRcdGVsLnZhbCgnJyk7XG5cdFx0fVxuXHRcdGVsLnByb3AoJ2NoZWNrZWQnLCBmYWxzZSk7XG5cdFx0ZWwuZmluZCgnb3B0aW9uJykucHJvcCgnc2VsZWN0ZWQnLCBmYWxzZSk7XG5cdH0sXG5cdGhhc0ZpZWxkOiBmdW5jdGlvbiBoYXNGaWVsZCggZWwgKXtcblx0XHRpZiAoJChlbCkuZGF0YSgnZmllbGQnKSkgeyBcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0sXG5cblx0YWRkRXJyb3I6IGZ1bmN0aW9uIGFkZEVycm9yKGFuc3dlcil7XG5cdFx0JCgnW2RhdGEtZmllbGQ9XCInK2Fuc3dlcisnXCJdJykuYWRkQ2xhc3MoJ2Vycm9yJyk7XG5cdH0sXG5cdHJlbW92ZUVycm9yOiBmdW5jdGlvbiByZW1vdmVFcnJvcihhbnN3ZXIpe1xuXHRcdCQoJ1tkYXRhLWZpZWxkPVwiJythbnN3ZXIrJ1wiXScpLnJlbW92ZUNsYXNzKCdlcnJvcicpO1xuXHR9LFx0XG5cblxuXHRpc1ZhbGlkOiBmdW5jdGlvbiBpc1ZhbGlkKCl7XG5cdFx0dGhpcy5zZXRWYWxpZGF0aW9uKCk7XG5cdFx0Zm9yKCB2YXIgYW5zd2VyIGluIHRoaXMudmFsdWUgKXtcblx0XHRcdHZhciB2YWx1ZSA9IHRoaXMudmFsdWVbYW5zd2VyXTtcblx0XHRcdGlmKCB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICl7XG5cdFx0XHRcdGxldCB2YWxpZGl0eSA9IHRoaXMuY2hlY2tHcm91cFZhbGlkaXR5KCB2YWx1ZSApO1xuXHRcdFx0XHR0aGlzLnNldFZhbGlkYXRpb24oIHZhbGlkaXR5ICk7XG5cdFx0XHR9IGVsc2V7XG5cdFx0XHRcdGxldCB2YWxpZGl0eSA9IHRoaXMuY2hlY2tJbmRpdmlkdWFsVmFsaWRpdHkoIGFuc3dlciwgdmFsdWUgKTtcblx0XHRcdFx0dGhpcy5zZXRWYWxpZGF0aW9uKCB2YWxpZGl0eSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5nZXRWYWxpZGF0aW9uKCk7XG5cdH0sXG5cdGNoZWNrR3JvdXBWYWxpZGl0eTogZnVuY3Rpb24gY2hlY2tHcm91cFZhbGlkaXR5KGdyb3VwKXtcblx0XHR2YXIgZ3JvdXBJc1ZhbGlkID0gdHJ1ZTtcblx0XHRmb3IodmFyIHN1YkFuc3dlciBpbiBncm91cCApe1xuXHRcdFx0Z3JvdXBJc1ZhbGlkID0gdGhpcy5jaGVja0luZGl2aWR1YWxWYWxpZGl0eShzdWJBbnN3ZXIsIGdyb3VwW3N1YkFuc3dlcl0pO1xuXHRcdH1cblx0XHRyZXR1cm4gZ3JvdXBJc1ZhbGlkO1xuXHR9LFxuXHRjaGVja0luZGl2aWR1YWxWYWxpZGl0eTogZnVuY3Rpb24gY2hlY2tJbmRpdmlkdWFsVmFsaWRpdHkoa2V5LCB2YWx1ZSl7XG5cdFx0XHR2YXIgZmllbGRJc1ZhbGlkID0gdGhpcy52YWxpZGF0ZVByZXNlbmNlKGtleSwgdmFsdWUpICYmIFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0IHRoaXMudmFsaWRhdGVSYW5nZShrZXksIHZhbHVlKTtcblx0XHRcdGlmKGZpZWxkSXNWYWxpZCl7XG5cdFx0XHRcdHRoaXMucmVtb3ZlRXJyb3Ioa2V5KTtcdFx0XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmllbGRJc1ZhbGlkO1xuXHR9LFxuXG5cblx0dmFsaWRhdGVQcmVzZW5jZTogZnVuY3Rpb24gdmFsaWRhdGVQcmVzZW5jZShrZXksIHZhbHVlKXtcblx0XHRpZiAoICF0aGlzLmlzUHJlc2VudChrZXksIHZhbHVlKSApIHtcblx0XHRcdHRoaXMuYWRkRXJyb3Ioa2V5KTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cdHZhbGlkYXRlUmFuZ2U6IGZ1bmN0aW9uIHZhbGlkYXRlUmFuZ2Uoa2V5LCB2YWx1ZSl7XG5cdFx0aWYgKCAhdGhpcy5pc0JldHdlZW4oa2V5LCB2YWx1ZSkgKSB7XG5cdFx0XHR0aGlzLmFkZEVycm9yKGtleSk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVx0XHRcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXG5cdGlzVmFsaWRJbnB1dDogZnVuY3Rpb24gaXNWYWxpZElucHV0KGVsKSB7XG5cdFx0aWYgKCBlbC5hdHRyKCd0eXBlJykgPT09ICd0ZXh0JyApIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0sXG5cdGlzVmFsaWRDaGVja2JveDogZnVuY3Rpb24gaXNWYWxpZENoZWNrYm94KGVsKSB7XG5cdFx0aWYgKCBlbC5wcm9wKCdjaGVja2VkJykgKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9LFxuXHRpc1ZhbGlkU2VsZWN0OiBmdW5jdGlvbiBpc1ZhbGlkU2VsZWN0KGVsKSB7XG5cdFx0aWYgKCBlbFswXS50YWdOYW1lID09PSAnU0VMRUNUJyAmJiBlbC52YWwoKSApIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0sXG5cblxuXHRpc1ByZXNlbnQ6IGZ1bmN0aW9uIGlzUHJlc2VudChrZXksIHZhbHVlKXtcblx0XHRyZXR1cm4gdGhpcy5yZXF1aXJlZFtrZXldID09PSBmYWxzZSB8fCB2YWx1ZSAhPT0gJyc7XG5cdH0sXG5cdGlzQmV0d2VlbjogZnVuY3Rpb24gaXNCZXR3ZWVuKGtleSwgdmFsdWUpe1xuXHRcdGlmKHRoaXMucmFuZ2VzW2tleV0gPT09IHVuZGVmaW5lZCl7IHJldHVybiB0cnVlOyB9XG5cdFx0dmFyIG1heCA9IHRoaXMucmFuZ2VzW2tleV0ubWF4O1xuXHRcdHZhciBtaW4gPSB0aGlzLnJhbmdlc1trZXldLm1pbjtcblx0XHRpZihtYXggPT09IHVuZGVmaW5lZCB8fCBtaW4gPT09IHVuZGVmaW5lZCl7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIHZhbHVlIDw9IG1heCAmJiB2YWx1ZSA+PSBtaW47XG5cdH0sXG5cblx0YWRkQW5zd2VyOiBmdW5jdGlvbiBhZGRBbnN3ZXIoY29udGFpbmVyKXtcblx0XHR0aGlzLmNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyLmFkZChjb250YWluZXIpO1xuXHRcdHRoaXMuc2V0Q2FsbGJhY2tDaGFuZ2UoY29udGFpbmVyKTtcdFx0XG5cdFx0dGhpcy5zZXRSYW5nZXMoKTtcblx0XHR0aGlzLnNldFJlcXVpcmVkKCk7XG5cdH0sXG5cdHJlbW92ZUFuc3dlcjogZnVuY3Rpb24gcmVtb3ZlQW5zd2VyKGNvbnRhaW5lcil7XG5cdFx0dGhpcy5jb250YWluZXIgPSB0aGlzLmNvbnRhaW5lci5ub3QoY29udGFpbmVyKTtcblx0XHR0aGlzLnVuc2V0Q2hhbmdlKGNvbnRhaW5lcik7XHRcdFx0XHRcblx0XHR0aGlzLnNldFJhbmdlcygpO1xuXHRcdHRoaXMucmVxdWlyZWQgPSB7fTtcblx0XHR0aGlzLnNldFJlcXVpcmVkKCk7XG5cdFx0dGhpcy5kZWxldGVWYWx1ZSggY29udGFpbmVyICk7XG5cdH1cblxufTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBBbnN3ZXJzID0gZnVuY3Rpb24oKXtcblx0dGhpcy5wcml2YXRlVmFsdWUgPSB7fTtcblx0dGhpcy5hbGwgPSBbXTtcbn07XG5BbnN3ZXJzLnByb3RvdHlwZSA9IHtcblx0Y3JlYXRlQW5zd2VyIDogZnVuY3Rpb24gY3JlYXRlQW5zd2VyKGRvbSl7XG5cdFx0dmFyIGFuc3dlciA9IG5ldyBBbnN3ZXIoIGRvbSApO1xuXHRcdHRoaXMuYWxsLnB1c2goYW5zd2VyKTtcblx0XHRyZXR1cm4gYW5zd2VyO1xuXHR9LFxuXHRnZXRSZWNvcmQ6IGZ1bmN0aW9uKCl7XG5cdFx0dGhpcy5yZXBvcnQoKTtcblx0XHRyZXR1cm4gdGhpcy5wcml2YXRlVmFsdWU7XG5cdH0sXG5cdHNldFJlY29yZDogZnVuY3Rpb24oYXJnKXtcblx0XHR0aGlzLnByaXZhdGVWYWx1ZSA9IGFyZztcblx0fSxcblx0dmFsaWRhdGVBbGwgOiBmdW5jdGlvbiB2YWxpZGF0ZUFsbCgpe1xuXHRcdGZvcih2YXIgaSA9IDA7IGk8IHRoaXMuYWxsLmxlbmd0aDsgaSsrKXtcblx0XHRcdHRoaXMuYWxsW2ldLmlzVmFsaWQoKTtcblx0XHR9XG5cdH0sXG5cdHJlcG9ydCA6IGZ1bmN0aW9uIHJlcG9ydCgpe1xuXHRcdGZvcih2YXIgaSA9IDA7IGk8IHRoaXMuYWxsLmxlbmd0aDsgaSsrKXtcblx0XHRcdCQuZXh0ZW5kKHRoaXMucHJpdmF0ZVZhbHVlLCB0aGlzLmFsbFtpXS52YWx1ZSk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLnByaXZhdGVWYWx1ZTtcblx0fSxcblx0cmVzZXRBbGwgOiBmdW5jdGlvbiByZXNldEFsbCgpe1xuXHRcdGZvcih2YXIgaSA9IDA7IGk8IHRoaXMuYWxsLmxlbmd0aDsgaSsrKXtcblx0XHRcdHRoaXMuYWxsW2ldLmZvcm1hdFZhbHVlKHRydWUpO1xuXHRcdH1cblx0XHR0aGlzLnJlcG9ydCgpO1xuXHR9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgU2NlbmUgPSBmdW5jdGlvbigga2xhc3MgKXtcblx0dGhpcy5jb250YWluZXIgICA9IGtsYXNzO1xuXHR0aGlzLmJvdW5kICAgICAgID0gZmFsc2U7XG5cdHJldHVybiB0aGlzO1xufTtcblNjZW5lLnByb3RvdHlwZSA9IHtcblx0c2V0Q2FsbGJhY2sgOiBmdW5jdGlvbiBzZXRDYWxsYmFjayggY2FsbGJhY2s9ZmFsc2UsIGFyZ3M9ZmFsc2UgKXtcblx0XHR0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XG5cdFx0dGhpcy5hcmdzID0gYXJncztcblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblx0c2V0U2NyaXB0IDogZnVuY3Rpb24gc2V0U2NyaXB0KCBzY3JpcHQgKXtcblx0XHR0aGlzLnNjcmlwdCA9IHNjcmlwdCB8fCB1bmRlZmluZWQ7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cdHNldEJ1dHRvbiA6IGZ1bmN0aW9uIHNldEJ1dHRvbigga2xhc3M9Jy5qcy1idXR0b24nICl7XG5cdFx0dGhpcy5idXR0b24gPSB0aGlzLmZpbmRCdXR0b24oIGtsYXNzICk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cdHNldEFuc3dlciA6IGZ1bmN0aW9uIHNldEFuc3dlcigga2xhc3M9Jy5qcy1hbnN3ZXInICl7XG5cdFx0dGhpcy5hbnN3ZXJDbGFzcyA9IGtsYXNzO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXHRiaW5kQ2xpY2tzIDogZnVuY3Rpb24gYmluZENsaWNrcygpe1xuXHRcdHZhciBzZWxmID0gdGhpcztcblx0XHR0aGlzLmJ1dHRvbi5lYWNoKGZ1bmN0aW9uKCl7XG5cdFx0XHRzZWxmLmJpbmRDbGljaygkKHRoaXMpKTtcblx0XHR9KTtcblx0fSxcblx0aW5pdCA6IGZ1bmN0aW9uIGluaXQoIHNjcmlwdCwgb3B0cz17fSApe1xuXHRcdHRoaXMuc2V0Q2FsbGJhY2soIG9wdHMuY2FsbGJhY2ssIG9wdHMuY2FsbGJhY2tBcmdzIClcblx0XHRcdFx0LnNldFNjcmlwdCggc2NyaXB0IClcblx0XHRcdFx0LnNldEJ1dHRvbiggb3B0cy5idXR0b24gKVxuXHRcdFx0XHQuc2V0QW5zd2VyKCBvcHRzLmFuc3dlciApXG5cdFx0XHRcdC5jcmVhdGVBbnN3ZXJzKClcblx0XHRcdFx0LmJpbmRDbGlja3MoKTtcblx0fSxcblx0Y3JlYXRlQW5zd2VycyA6IGZ1bmN0aW9uIGNyZWF0ZUFuc3dlcnMoKXtcblx0XHRpZih0aGlzLnNjcmlwdCA9PT0gdW5kZWZpbmVkKXtcblx0XHRcdHRoaXMuYW5zd2VyID0gbmV3IEFuc3dlcih0aGlzLmNvbnRhaW5lci5maW5kKHRoaXMuYW5zd2VyQ2xhc3MpKTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHR2YXIgYW5zd2VyRWwgPSB0aGlzLmNvbnRhaW5lci5maW5kKHRoaXMuYW5zd2VyQ2xhc3MpO1xuXHRcdHRoaXMuYW5zd2VyID0gdGhpcy5zY3JpcHQuYW5zd2Vycy5jcmVhdGVBbnN3ZXIoIGFuc3dlckVsICk7XG5cdFx0cmV0dXJuIHRoaXNcblx0fSxcblx0ZmluZEJ1dHRvbiA6IGZ1bmN0aW9uIGZpbmRCdXR0b24oYnV0dG9uQ2xhc3Mpe1xuXHRcdGlmKGJ1dHRvbkNsYXNzICE9PSB1bmRlZmluZWQpe1xuXHRcdFx0cmV0dXJuIHRoaXMuY29udGFpbmVyLmZpbmQoYnV0dG9uQ2xhc3MpO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5jb250YWluZXIuZmluZCgnLmpzLWJ1dHRvbicpO1xuXHR9LFxuXHRzaG93IDogZnVuY3Rpb24gc2hvdygpe1xuXHRcdHRoaXMuY29udGFpbmVyLmFkZENsYXNzKCdhY3RpdmUnKTtcblx0fSxcblx0aGlkZSA6IGZ1bmN0aW9uIGhpZGUoKXtcblx0XHR0aGlzLmNvbnRhaW5lci5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG5cdH0sXG5cdHNoYWtlIDogZnVuY3Rpb24gc2hha2UoKXtcblx0XHR0aGlzLmNvbnRhaW5lci5hZGRDbGFzcygnZXJyb3InKTtcblx0fSxcblx0dW5zaGFrZSA6IGZ1bmN0aW9uIHVuc2hha2UoKXtcblx0XHR0aGlzLmNvbnRhaW5lci5yZW1vdmVDbGFzcygnZXJyb3InKTtcblx0fSxcblx0aGFuZGxlQ2FsbGJhY2s6IGZ1bmN0aW9uIGhhbmRsZUNhbGxiYWNrKCkge1xuXHRcdHZhciBhcmdzID0gdHlwZW9mIHRoaXMuYXJncyA9PT0gJ2Z1bmN0aW9uJyA/IFxuXHRcdFx0XHR0aGlzLmFyZ3MoKSA6IHRoaXMuYXJncztcblxuXHRcdGlmICggdGhpcy5jYWxsYmFjaykge1xuXHRcdFx0dGhpcy5jYWxsYmFjayggYXJncyApO1xuXHRcdH1cblx0fSxcblx0ZmluYWxpemUgOiBmdW5jdGlvbiBmaW5hbGl6ZSgpe1xuXHRcdHRoaXMudW5zaGFrZSgpO1xuXHRcdGlmKHRoaXMuc2NyaXB0ICE9PSB1bmRlZmluZWQpe1xuXHRcdFx0dGhpcy5zY3JpcHQubmV4dCgpO1xuXHRcdH1cblx0XHR0aGlzLmhhbmRsZUNhbGxiYWNrKCk7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cdHZhbGlkYXRlIDogZnVuY3Rpb24gdmFsaWRhdGUoKXtcblx0XHR0aGlzLmFuc3dlci5pc1ZhbGlkKCk7XG5cdFx0aWYoJCh0aGlzLmFuc3dlci5jb250YWluZXIpLmhhc0NsYXNzKCdlcnJvcicpKXtcblx0XHRcdHRoaXMuc2hha2UoKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0dGhpcy5maW5hbGl6ZSgpO1xuXHR9LFxuXHRiaW5kQ2xpY2sgOiBmdW5jdGlvbiBiaW5kQ2xpY2soZWwpe1xuXHRcdHZhciBzZWxmID0gdGhpcztcblx0XHRlbC5jbGljayhmdW5jdGlvbigpe1xuXHRcdFx0c2VsZi52YWxpZGF0ZSgpO1xuXHRcdH0pO1xuXHRcdHRoaXMuYm91bmQgPSB0cnVlO1xuXHR9LFxuXHRkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCl7XG5cdFx0dGhpcy5oaWRlKCk7XG5cdFx0ZGVsZXRlIHRoaXMuYW5zd2Vycztcblx0XHRkZWxldGUgdGhpcztcblx0fVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIFNjcmlwdCA9IGZ1bmN0aW9uKCBjb250YWluZXIsIGF1dG89dHJ1ZSApIHtcblx0dGhpcy5jb250YWluZXIgICA9IGNvbnRhaW5lcjtcblx0dGhpcy5zY2VuZXMgICAgICA9IFtdO1xuXHR0aGlzLmN1cnJlbnQgICAgID0gMDtcblx0aWYoIGF1dG8gKXtcblx0XHR0aGlzLmluaXQoKTtcblx0fVxuXHRyZXR1cm4gdGhpcztcbn07XG5TY3JpcHQucHJvdG90eXBlID0ge1xuXHRzZXRGaW5pc2hlZCA6IGZ1bmN0aW9uIHNldEZpbmlzaGVkKCBvbkZpbmlzaGVkLCBhcmdzICl7XG5cdFx0dGhpcy5vbkZpbmlzaGVkID0gb25GaW5pc2hlZCAgfHwgZmFsc2U7XG5cdFx0dGhpcy5hcmdzID0gYXJncyB8fCBmYWxzZTtcblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblx0c2V0U2NlbmUgOiBmdW5jdGlvbiBzZXRTY2VuZSgga2xhc3MgKXtcblx0XHR0aGlzLnNjZW5lQ2xhc3MgID0ga2xhc3MgIHx8ICcuanMtc2NlbmUnO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXHRzZXRCdXR0b24gOiBmdW5jdGlvbiBzZXRCdXR0b24oIGtsYXNzICl7XG5cdFx0dGhpcy5idXR0b25DbGFzcyA9IGtsYXNzIHx8ICcuanMtYnV0dG9uJztcblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblx0c2V0QW5zd2VyIDogZnVuY3Rpb24gc2V0QW5zd2VyKCBrbGFzcyApe1xuXHRcdHRoaXMuYW5zd2VyQ2xhc3MgPSBrbGFzcyB8fCAnLmpzLWFuc3dlcic7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cdHNldEFuc3dlcnM6IGZ1bmN0aW9uIHNldEFuc3dlcnMoIGFuc3dlcnMgKXtcblx0XHR0aGlzLmFuc3dlcnMgPSBhbnN3ZXJzIHx8IG5ldyBBbnN3ZXJzKCk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cdG1ha2VTY2VuZXMgOiBmdW5jdGlvbiBtYWtlU2NlbmVzKCBvcHRzICl7XG5cdFx0aWYoIHRoaXMuYW5zd2VycyAhPT0gdW5kZWZpbmVkICl7XG5cdFx0XHRvcHRzLmFuc3dlcnMgPSB0aGlzLmFuc3dlcnM7XG5cdFx0fVxuXHRcdHZhciBzZWxmID0gdGhpcztcblx0XHR0aGlzLmNvbnRhaW5lci5maW5kKCB0aGlzLnNjZW5lQ2xhc3MgKS5lYWNoKCBmdW5jdGlvbigpe1xuXHRcdFx0c2VsZi5hZGRTY2VuZSggJCggdGhpcyApLCBvcHRzICk7XG5cdFx0fSApO1xuXHRcdHJldHVybiB0aGlzXG5cdH0sXG5cdGluaXQgOiBmdW5jdGlvbiBpbml0KCBvcHRzID0ge30gKXtcblx0XHR0aGlzLnNldEZpbmlzaGVkKCBvcHRzLm9uRmluaXNoZWQsIG9wdHMub25GaW5pc2hlZEFyZ3MgKVxuXHRcdFx0XHQuc2V0U2NlbmUoIG9wdHMuc2NlbmUgKVxuXHRcdFx0XHQuc2V0QnV0dG9uKCBvcHRzLmJ1dHRvbiApXG5cdFx0XHRcdC5zZXRBbnN3ZXIoIG9wdHMuYW5zd2VyIClcblx0XHRcdFx0LnNldEFuc3dlcnMoIG9wdHMuYW5zd2VycyApXG5cdFx0XHRcdC5tYWtlU2NlbmVzKCBvcHRzIClcblx0XHRcdFx0LnN0YXJ0KCk7XG5cdH0sXG5cblx0YWRkU2NlbmUgOiBmdW5jdGlvbiBhZGRTY2VuZSggZWwsIG9wdHMgKXtcblx0XHRsZXQgc2NlbmUgPSBuZXcgU2NlbmUoIGVsICk7XG5cdFx0c2NlbmUuaW5pdCggdGhpcywgb3B0cyApO1xuXHRcdHRoaXMuc2NlbmVzLnB1c2goIHNjZW5lICk7XG5cdH0sXG5cdHJlbW92ZVNjZW5lIDogZnVuY3Rpb24gcmVtb3ZlU2NlbmUoKXtcblx0XHR0aGlzLnNjZW5lcy5wb3AoKS5kZXN0cm95KCk7XG5cdH0sXG5cblxuXHRhZGRBdCA6IGZ1bmN0aW9uIGFkZEF0KCBpbmRleCwgZWwsIG9wdHMgKXtcblx0XHRsZXQgc2NlbmUgPSBuZXcgU2NlbmUoIGVsICk7XG5cdFx0c2NlbmUuaW5pdCggdGhpcywgb3B0cyApO1xuXHRcdHRoaXMuc2NlbmVzLnNwbGljZSggaW5kZXgsIDAsIHNjZW5lICk7XG5cdH0sXG5cdHJlbW92ZUF0IDogZnVuY3Rpb24gcmVtb3ZlQXQoIGluZGV4ICl7XG5cdFx0dGhpcy5zY2VuZXMuc3BsaWNlKCBpbmRleCwgMSApWyAwIF0uZGVzdHJveSgpO1xuXHR9LFxuXG5cblx0cHJldmlvdXMgOiBmdW5jdGlvbiBwcmV2aW91cygpe1xuXHRcdHRoaXMuc2NlbmVzWyB0aGlzLmN1cnJlbnQgXS5oaWRlKCk7XG5cdFx0aWYoIHRoaXMuY3VycmVudCA+IDAgKXtcblx0XHRcdHRoaXMudW50aWNrKCk7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0dGhpcy5zdGFydCgpO1xuXHR9LFxuXHRuZXh0IDogZnVuY3Rpb24gbmV4dCgpe1xuXHRcdHRoaXMuc2NlbmVzWyB0aGlzLmN1cnJlbnQgXS5oaWRlKCk7XG5cdFx0aWYoIHRoaXMuc2NlbmVzLmxlbmd0aCAtMSA+IHRoaXMuY3VycmVudCApe1xuXHRcdFx0dGhpcy50aWNrKCk7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0dGhpcy5maW5pc2goKTtcblx0fSxcblxuXG5cdHRpY2sgOiBmdW5jdGlvbiB0aWNrKCl7XG5cdFx0dGhpcy5jdXJyZW50ICs9IDE7XG5cdFx0dGhpcy5zY2VuZXNbIHRoaXMuY3VycmVudCBdLnNob3coKTtcblx0fSxcblx0dW50aWNrIDogZnVuY3Rpb24gdW50aWNrKCl7XG5cdFx0dGhpcy5jdXJyZW50IC09IDE7XG5cdFx0dGhpcy5zY2VuZXNbIHRoaXMuY3VycmVudCBdLnNob3coKTtcblx0fSxcblxuXHRoYW5kbGVGdW5jdGlvbiA6IGZ1bmN0aW9uIGhhbmRsZUZ1bmN0aW9uKCBmdW5jdCwgYXJncyApe1xuXHRcdGZ1bmN0LmNhbGwoIHRoaXMsIGFyZ3MgKTtcblx0fSxcblxuXHRoYW5kbGVBcnJheSA6IGZ1bmN0aW9uIGhhbmRsZUFycmF5KCl7XG5cdFx0dGhpcy5mb3JtYXRBcmdzQXJyYXkoKTtcblx0XHRmb3IoIGxldCBpID0gMDsgaTwgdGhpcy5vbkZpbmlzaGVkLmxlbmd0aDsgaSsrICl7XG5cdFx0XHR0aGlzLm9uRmluaXNoZWRbIGkgXS5jYWxsKCB0aGlzLCB0aGlzLmFyZ3NbIGkgXSApO1xuXHRcdH1cblx0fSxcblx0Zm9ybWF0QXJnc0FycmF5IDogZnVuY3Rpb24gZm9ybWF0QXJnc0FycmF5KCl7XG5cdFx0aWYoIHR5cGVvZiB0aGlzLmFyZ3MgPT09ICdvYmplY3QnICl7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdHRoaXMuYXJncyA9IG5ldyBBcnJheSggdGhpcy5hcmdzICk7XG5cdH0sXG5cdGZpbmlzaCA6IGZ1bmN0aW9uIGZpbmlzaCgpe1xuXHRcdHRoaXMuY29udGFpbmVyLmFkZENsYXNzKCdmaW5pc2hlZCcpO1xuXHRcdGlmKCB0aGlzLm9uRmluaXNoZWQgKXtcblx0XHRcdGlmKCB0eXBlb2YgdGhpcy5vbkZpbmlzaGVkID09PSAnZnVuY3Rpb24nICl7XG5cdFx0XHRcdHRoaXMuaGFuZGxlRnVuY3Rpb24oIHRoaXMub25GaW5pc2hlZCwgdGhpcy5hcmdzICk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdHRoaXMuaGFuZGxlQXJyYXkoKTtcblx0XHR9XG5cdH0sXG5cdHN0YXJ0IDogZnVuY3Rpb24gc3RhcnQoKXtcblx0XHR0aGlzLmN1cnJlbnQgPSAwO1xuXHRcdHRoaXMuc2NlbmVzWyB0aGlzLmN1cnJlbnQgXS5zaG93KCk7XG5cdFx0dGhpcy5jb250YWluZXIuYWRkQ2xhc3MoICdzdGFydGVkJyApO1xuXHR9LFxuXHRyZXN0YXJ0OiBmdW5jdGlvbiByZXN0YXJ0KCl7XG5cdFx0dGhpcy5hbnN3ZXJzLnJlc2V0QWxsKCk7XG5cdFx0dGhpcy5jb250YWluZXIucmVtb3ZlQ2xhc3MoICdmaW5pc2hlZCcgKTtcblx0XHR0aGlzLnN0YXJ0KCk7XG5cdH0sXG5cdGFkZENhbGxiYWNrVG9TY2VuZTogZnVuY3Rpb24oIHNjZW5lSWR4LCBjYWxsYmFjaywgYXJnICkge1xuXHRcdHZhciBzY2VuZSA9IHRoaXMuc2NlbmVzWyBzY2VuZUlkeCBdO1xuXHRcdHNjZW5lLmFyZ3MgPSBhcmc7XG5cdFx0c2NlbmUuY2FsbGJhY2sgPSBjYWxsYmFjay5iaW5kKCBzY2VuZSApO1xuXHR9XG59O1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9