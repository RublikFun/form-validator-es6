'use strict';

var Answer = function Answer(container) {
	this.ranges = {};
	this.required = {};
	this.restrictions = {};
	this.container = container;
	this.value = {};
	this.validations = [];
	this.init();
};
Answer.prototype = {
	init: function init() {
		this.setRanges();
		this.setRequired();
		this.setRestrictions();
		this.formatValue();
		this.setChange(this.container);
	},
	setValidation: function setValidation(arg) {
		if (typeof arg === 'boolean') {
			this.validations.push(arg);
			return;
		}
		this.validations = [];
	},
	getValidation: function getValidation() {
		var i,
		    allAreValid = true;
		for (i = 0; i < this.validations.length; i++) {
			if (this.validations[i] === false) {
				allAreValid = false;
				break;
			}
		}
		return allAreValid;
	},
	setRanges: function setRanges() {
		var self = this;
		$(this.container).each(function () {
			self.ranges[$(this).data('field')] = {
				max: $(this).data('max') || false,
				min: $(this).data('min') || false
			};
		});
	},
	setRequired: function setRequired() {
		var self = this;
		$(this.container).each(function () {
			if ($(this).data('required') === false) {
				self.required[$(this).data('field')] = false;
			} else {
				self.required[$(this).data('field')] = true;
			}
		});
	},
	setRestrictions: function setRestrictions() {
		var self = this;
		$(this.container).each(function () {
			if ($(this).data('numeric') === true) {
				self.restrictions[$(this).data('field')] = 'numeric';
			} else {
				self.restrictions[$(this).data('field')] = false;
			}
		});
	},
	setChange: function setChange(els) {
		var self = this;
		els.on('change', function () {
			self.callbackCheck();
			self.formatValue();
		});
	},
	setCallbackChange: function setCallbackChange(els) {
		var self = this,
		    elementsToBind;
		elementsToBind = els.filter(function () {
			if (self.hasField(this)) {
				return this;
			}
		});
		$(elementsToBind).on('change', function () {
			self.formatValue();
		});
	},
	unsetChange: function unsetChange(els) {
		var self = this,
		    elementsToBind;
		elementsToBind = els.filter(function () {
			if (self.hasField(this)) {
				return this;
			}
		});
		$(elementsToBind).off('change');
	},
	callbackCheck: function callbackCheck() {
		var self = this;
		$(this.container).each(function () {
			self.checkForCallback($(this));
		});
	},

	formatValue: function formatValue(shouldReset) {
		var self = this,
		    reset = shouldReset || false;
		$(this.container).each(function () {
			if (reset) {
				self.clearValue($(this));
			}
			self.trackValue($(this));
		});
	},
	trackValue: function trackValue(el) {
		var key = el.data('grouping');
		if (key !== undefined) {
			this.trackDimensionalValue(el, key);
		} else {
			$.extend(this.value, this.formattedValue(el));
		}
	},
	trackDimensionalValue: function trackDimensionalValue(el, key) {
		this.value[key] = this.value[key] === undefined ? {} : this.value[key];
		$.extend(this.value[key], this.formattedValue(el));
	},
	formattedValue: function formattedValue(el) {
		var val = {};
		var key = el.data('field');
		val[key] = this.getDefault(el);
		if (this.hasValue(el)) {
			val[key] = this.getValueOrDefault(el);
			this.removeError(key);
			return val;
		}
		if (this.shouldOverwrite(el)) {
			val[key] = this.getDefault(el);
			return val;
		}
		return;
	},
	getValueOrDefault: function getValueOrDefault(el) {
		var value = el.val();
		if (value === '') {
			value = this.getDefault(el);
		}
		return value;
	},
	getDefault: function getDefault(el) {
		var value = '';
		if (el.data('default') !== undefined) {
			value = el.data('default');
		}
		return value;
	},
	deleteValue: function deleteValue(el) {
		var self = this;
		$(el).each(function () {
			delete self.value[$(this).data('field')];
		});
	},
	checkForCallback: function checkForCallback(el) {
		if (this.hasValue(el)) {
			return this.revealCallback(el);
		}

		return this.revertCallback(el);
	},
	revealCallback: function revealCallback(el) {
		var callbackElement = $('.' + el.data('callback')),
		    self = this;
		if (callbackElement.length > 0) {
			callbackElement.each(function () {
				if (self.hasField(this)) {
					self.addAnswer($(this));
				}
			});
			callbackElement.addClass('active');
		}
	},
	revertCallback: function revertCallback(el) {
		var callbackElement = $('.' + el.data('callback'));
		if (callbackElement.length > 0) {
			this.clearValue(callbackElement);
			this.removeAnswer(callbackElement);
			callbackElement.removeClass('active');
		}
	},

	hasValue: function hasValue(container) {
		return this.isValidInput(container) || this.isValidCheckbox(container) || this.isValidSelect(container);
	},
	shouldOverwrite: function shouldOverwrite(el) {
		return this.isDuplicate(el) && this.isFirst(el) || !this.isDuplicate(el);
	},
	isDuplicate: function isUnique(el) {
		return $('[data-field="' + el.data('field') + '"]').length > 1;
	},
	isFirst: function isFirst(el) {
		return $('[data-field="' + el.data('field') + '"]').index(el) === 0;
	},
	clearValue: function clearValue(el) {
		if (this.isValidInput(el)) {
			el.val('');
		}
		el.prop('checked', false);
		el.find('option').prop('selected', false);
	},
	hasField: function hasField(el) {
		if ($(el).data('field')) {
			return true;
		}
		return false;
	},

	addError: function addError(answer) {
		$('[data-field="' + answer + '"]').addClass('js-error');
	},
	removeError: function removeError(answer) {
		$('[data-field="' + answer + '"]').removeClass('js-error');
	},

	isValid: function isValid() {
		this.setValidation();
		for (var answer in this.value) {
			var value = this.value[answer];
			if (typeof value === 'object') {
				var validity = this.checkGroupValidity(value);
				this.setValidation(validity);
			} else {
				var validity = this.checkIndividualValidity(answer, value);
				this.setValidation(validity);
			}
		}
		return this.getValidation();
	},
	checkGroupValidity: function checkGroupValidity(group) {
		var groupIsValid = true;
		for (var subAnswer in group) {
			groupIsValid = this.checkIndividualValidity(subAnswer, group[subAnswer]);
		}
		return groupIsValid;
	},
	checkIndividualValidity: function checkIndividualValidity(key, value) {
		var fieldIsValid = this.validatePresence(key, value) && this.validateContent(key, value);
		if (fieldIsValid) {
			this.removeError(key);
		}
		return fieldIsValid;
	},

	validatePresence: function validatePresence(key, value) {
		if (!this.isPresent(key, value)) {
			this.addError(key);
			return false;
		}
		return true;
	},
	validateContent: function validateContent(key, value) {
		if (this.isNumericallyValid(key, value) && this.isInRange(key, value)) {
			return true;
		}
		this.addError(key);
		return false;
	},

	isValidInput: function isValidInput(el) {
		if (el.attr('type') === 'text') {
			return true;
		}
		return false;
	},
	isValidCheckbox: function isValidCheckbox(el) {
		if (el.prop('checked')) {
			return true;
		}
		return false;
	},
	isValidSelect: function isValidSelect(el) {
		if (el[0].tagName === 'SELECT' && el.val()) {
			return true;
		}
		return false;
	},
	isNumericallyValid: function isNumericallyValid(key, value) {
		var hasRestrictions = this.restrictions !== undefined;
		if (!hasRestrictions) {
			return true;
		}
		if (this.restrictions[key] === 'numeric') {
			return this.isNumeric(value);
		}
		return true;
	},
	isNumeric: function isNumeric(value) {
		if (isNaN(Number(value))) {
			return false;
		}
		return true;
	},
	isAbove: function isAbove(key, value) {
		var min = this.ranges[key].min;
		if (!min) {
			return true;
		}
		return this.isNumeric(value) && value >= min;
	},
	isBelow: function isBelow(key, value) {
		var max = this.ranges[key].max;
		if (!max) {
			return true;
		}
		return this.isNumeric(value) && value <= max;
	},

	isPresent: function isPresent(key, value) {
		return this.required[key] === false || value !== '';
	},
	isInRange: function isInRange(key, value) {
		if (this.ranges[key] === undefined) {
			return true;
		}
		return this.isAbove(key, value) && this.isBelow(key, value);
	},

	addAnswer: function addAnswer(container) {
		this.container = this.container.add(container);
		this.setCallbackChange(container);
		this.setRanges();
		this.setRequired();
	},
	removeAnswer: function removeAnswer(container) {
		this.container = this.container.not(container);
		this.unsetChange(container);
		this.setRanges();
		this.required = {};
		this.setRequired();
		this.deleteValue(container);
	}

};
'use strict';

var Answers = function Answers() {
	this.privateValue = {};
	this.all = [];
};
Answers.prototype = {
	createAnswer: function createAnswer(dom) {
		var answer = new Answer(dom);
		this.all.push(answer);
		return answer;
	},
	getRecord: function getRecord() {
		this.report();
		return this.privateValue;
	},
	setRecord: function setRecord(arg) {
		this.privateValue = arg;
	},
	validateAll: function validateAll() {
		for (var i = 0; i < this.all.length; i++) {
			this.all[i].isValid();
		}
	},
	report: function report() {
		for (var i = 0; i < this.all.length; i++) {
			$.extend(this.privateValue, this.all[i].value);
		}
		return this.privateValue;
	},
	resetAll: function resetAll() {
		for (var i = 0; i < this.all.length; i++) {
			this.all[i].formatValue(true);
		}
		this.report();
	}
};
'use strict';

var Scene = function Scene(klass) {
	this.container = klass;
	this.bound = false;
	return this;
};
Scene.prototype = {
	setCallback: function setCallback() {
		var callback = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];
		var args = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

		this.callback = callback;
		this.args = args;
		return this;
	},
	setScript: function setScript(script) {
		this.script = script || undefined;
		return this;
	},
	setButton: function setButton() {
		var klass = arguments.length <= 0 || arguments[0] === undefined ? '.js-button' : arguments[0];

		this.button = this.findButton(klass);
		return this;
	},
	setAnswer: function setAnswer() {
		var klass = arguments.length <= 0 || arguments[0] === undefined ? '.js-answer' : arguments[0];

		this.answerClass = klass;
		return this;
	},
	bindClicks: function bindClicks() {
		var self = this;
		this.button.each(function () {
			self.bindClick($(this));
		});
	},
	init: function init(script) {
		var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

		this.setCallback(opts.callback, opts.callbackArgs).setScript(script).setButton(opts.button).setAnswer(opts.answer).createAnswers().bindClicks();
	},
	createAnswers: function createAnswers() {
		if (this.script === undefined) {
			this.answer = new Answer(this.container.find(this.answerClass));
			return this;
		}
		var answerEl = this.container.find(this.answerClass);
		this.answer = this.script.answers.createAnswer(answerEl);
		return this;
	},
	findButton: function findButton(buttonClass) {
		if (buttonClass !== undefined) {
			return this.container.find(buttonClass);
		}
		return this.container.find('.js-button');
	},
	show: function show() {
		this.container.addClass('active');
	},
	hide: function hide() {
		this.container.removeClass('active');
	},
	shake: function shake() {
		this.container.addClass('js-error');
	},
	unshake: function unshake() {
		this.container.removeClass('js-error');
	},
	handleCallback: function handleCallback() {
		var args = typeof this.args === 'function' ? this.args() : this.args;

		if (this.callback) {
			this.callback(args);
		}
	},
	finalize: function finalize() {
		this.unshake();
		if (this.script !== undefined) {
			this.script.next();
		}
		this.handleCallback();
		return true;
	},
	validate: function validate() {
		this.answer.isValid();
		if ($(this.answer.container).hasClass('js-error')) {
			this.shake();
			return false;
		}
		this.finalize();
	},
	bindClick: function bindClick(el) {
		var self = this;
		el.click(function () {
			self.validate();
		});
		this.bound = true;
	},
	destroy: function destroy() {
		this.hide();
		delete this.answers;
		delete this;
	}
};
'use strict';

var Script = function Script(container) {
	var auto = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

	this.container = container || $('.js-script');
	this.scenes = [];
	this.current = 0;
	this.answers = new Answers();
	if (auto) {
		this.init().start();
	}
	return this;
};
Script.prototype = {
	setFinished: function setFinished(onFinished, args) {
		this.onFinished = onFinished || false;
		this.args = args || false;
		return this;
	},
	setScene: function setScene(klass) {
		this.sceneClass = klass || '.js-scene';
		return this;
	},
	setButton: function setButton(klass) {
		this.buttonClass = klass || '.js-button';
		return this;
	},
	setAnswer: function setAnswer(klass) {
		this.answerClass = klass || '.js-answer';
		return this;
	},
	makeScenes: function makeScenes(opts) {
		if (this.answers !== undefined) {
			opts.answers = this.answers;
		}
		var self = this;
		this.container.find(this.sceneClass).each(function () {
			self.addScene($(this), opts);
		});
		return this;
	},
	init: function init() {
		var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

		this.setFinished(opts.onFinished, opts.onFinishedArgs).setScene(opts.scene).setButton(opts.button).setAnswer(opts.answer).makeScenes(opts);
		return this;
	},

	addScene: function addScene(el, opts) {
		var scene = new Scene(el);
		scene.init(this, opts);
		this.scenes.push(scene);
	},
	removeScene: function removeScene() {
		this.scenes.pop().destroy();
	},

	addAt: function addAt(index, el, opts) {
		var scene = new Scene(el);
		scene.init(this, opts);
		this.scenes.splice(index, 0, scene);
	},
	removeAt: function removeAt(index) {
		this.scenes.splice(index, 1)[0].destroy();
	},

	previous: function previous() {
		this.scenes[this.current].hide();
		if (this.current > 0) {
			this.untick();
			return true;
		}
		this.start();
	},
	next: function next() {
		this.scenes[this.current].hide();
		if (this.scenes.length - 1 > this.current) {
			this.tick();
			return true;
		}
		this.finish();
	},

	tick: function tick() {
		this.current += 1;
		this.scenes[this.current].show();
	},
	untick: function untick() {
		this.current -= 1;
		this.scenes[this.current].show();
	},

	handleFunction: function handleFunction(funct, args) {
		funct.call(this, args);
	},

	handleArray: function handleArray() {
		this.formatArgsArray();
		for (var i = 0; i < this.onFinished.length; i++) {
			this.onFinished[i].call(this, this.args[i]);
		}
	},
	formatArgsArray: function formatArgsArray() {
		if (typeof this.args === 'object') {
			return;
		}
		this.args = new Array(this.args);
	},
	finish: function finish() {
		this.container.addClass('finished');
		if (this.onFinished) {
			if (typeof this.onFinished === 'function') {
				this.handleFunction(this.onFinished, this.args);
				return;
			}
			this.handleArray();
		}
	},
	start: function start() {
		this.current = 0;
		this.scenes[this.current].show();
		this.container.addClass('started');
	},
	restart: function restart() {
		this.answers.resetAll();
		this.container.removeClass('finished');
		this.start();
	},
	addCallbackToScene: function addCallbackToScene(sceneIdx, callback, arg) {
		var scene = this.scenes[sceneIdx];
		scene.args = arg;
		scene.callback = callback.bind(scene);
	}
};
//# sourceMappingURL=data:application/json;base64,